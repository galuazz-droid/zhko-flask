import os
import asyncio
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.fsm.state import State, StatesGroup
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from dotenv import load_dotenv

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–∞–Ω–Ω—ã—Ö
DATA_FILE = "data.json"

# –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö
def load_data():
    if not os.path.exists(DATA_FILE):
        return {}
    with open(DATA_FILE, "r", encoding="utf-8") as f:
        return json.load(f)

# –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö
def save_data(data):
    with open(DATA_FILE, "w", encoding="utf-8") as f:
        json.dump(data, f, ensure_ascii=False, indent=2)

# –°–æ—Å—Ç–æ—è–Ω–∏—è FSM
class Form(StatesGroup):
    choosing_status = State()
    entering_start_date = State()
    entering_end_date = State()

# –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é
def get_main_keyboard():
    builder = ReplyKeyboardBuilder()
    builder.add(KeyboardButton(text="–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å"))
    builder.add(KeyboardButton(text="–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é"))
    builder.add(KeyboardButton(text="–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –º–µ—Å—è—Ü"))
    builder.add(KeyboardButton(text="–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç"))
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –ö–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å—Ç–∞—Ç—É—Å–æ–≤
def get_status_keyboard():
    statuses = ["–û—Ç–ø—É—Å–∫", "–í –æ—Ñ–∏—Å–µ", "–ù–∞ –æ–±—ä–µ–∫—Ç–µ", "–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞"]
    builder = ReplyKeyboardBuilder()
    for status in statuses:
        builder.add(KeyboardButton(text=status))
    builder.button(text="–ù–∞–∑–∞–¥")
    builder.adjust(2)
    return builder.as_markup(resize_keyboard=True)

# –ü–∞—Ä—Å–∏–Ω–≥ –¥–∞—Ç—ã
def parse_date(date_str):
    try:
        return datetime.strptime(date_str.strip(), "%d.%m.%Y").date()
    except ValueError:
        return None

# –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –≥—Ä–∞—Ñ–∏–∫–∞
def generate_schedule_report(days=7):
    data = load_data()
    today = datetime.today().date()
    end_date = today + timedelta(days=days-1)

    report = f"üìÖ –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ {'–Ω–µ–¥–µ–ª—é' if days == 7 else '–º–µ—Å—è—Ü'} ({today.strftime('%d.%m')} - {end_date.strftime('%d.%m.%Y')}):\n\n"

    if not data:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ —Å—Ç–∞—Ç—É—Å–∞—Ö —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤."

    # –°–æ–±–∏—Ä–∞–µ–º –≤—Å–µ –¥–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
    date_list = [today + timedelta(days=i) for i in range(days)]

    # –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    for user_id, user_data in data.items():
        username = user_data.get("username", f"ID{user_id}")
        report += f"üë§ {username}:\n"
        user_statuses = user_data.get("statuses", [])

        # –î–ª—è –∫–∞–∂–¥–æ–π –¥–∞—Ç—ã –≤ –¥–∏–∞–ø–∞–∑–æ–Ω–µ
        for d in date_list:
            status_for_day = "‚Äî"
            for record in user_statuses:
                start = datetime.strptime(record["start"], "%Y-%m-%d").date()
                end = datetime.strptime(record["end"], "%Y-%m-%d").date()
                if start <= d <= end:
                    status_for_day = record["status"]
                    break
            report += f"  {d.strftime('%d.%m')}: {status_for_day}\n"
        report += "\n"

    return report.strip()

# –û—á–∏—Å—Ç–∫–∞ —á–∞—Ç–∞ (–æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ: —Ç–æ–ª—å–∫–æ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 100 —Å–æ–æ–±—â–µ–Ω–∏–π)
async def clear_chat(chat_id, message_id, bot: Bot):
    for i in range(1, 101):
        try:
            await bot.delete_message(chat_id, message_id - i)
        except:
            pass  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ (—Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –∏–ª–∏ –Ω–µ—Ç –ø—Ä–∞–≤)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ /start
@dp.message(Command("start"))
async def cmd_start(message: types.Message):
    user_id = str(message.from_user.id)
    username = message.from_user.username or f"User{user_id}"
    data = load_data()
    if user_id not in data:
        data[user_id] = {"username": username, "statuses": []}
        save_data(data)
    await message.answer(
        f"–ü—Ä–∏–≤–µ—Ç, {username}! üëã\n–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:",
        reply_markup=get_main_keyboard()
    )

# –î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å ‚Äî —à–∞–≥ 1
@dp.message(lambda msg: msg.text == "–î–æ–±–∞–≤–∏—Ç—å —Å—Ç–∞—Ç—É—Å")
async def add_status_start(message: types.Message, state: FSMContext):
    await state.set_state(Form.choosing_status)
    await message.answer("–í—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å:", reply_markup=get_status_keyboard())

# –í—ã–±–æ—Ä —Å—Ç–∞—Ç—É—Å–∞ ‚Äî —à–∞–≥ 2
@dp.message(Form.choosing_status)
async def status_chosen(message: types.Message, state: FSMContext):
    if message.text == "–ù–∞–∑–∞–¥":
        await state.clear()
        await message.answer("–í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())
        return

    valid_statuses = ["–û—Ç–ø—É—Å–∫", "–í –æ—Ñ–∏—Å–µ", "–ù–∞ –æ–±—ä–µ–∫—Ç–µ", "–ö–æ–º–∞–Ω–¥–∏—Ä–æ–≤–∫–∞"]
    if message.text not in valid_statuses:
        await message.answer("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ —Å—Ç–∞—Ç—É—Å –∏–∑ —Å–ø–∏—Å–∫–∞.")
        return

    await state.update_data(chosen_status=message.text)
    await state.set_state(Form.entering_start_date)
    await message.answer(
        "üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –Ω–∞—á–∞–ª–∞ (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):\n–ù–∞–ø—Ä–∏–º–µ—Ä: 01.06.2025",
        reply_markup=types.ReplyKeyboardRemove()
    )

# –í–≤–æ–¥ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞ ‚Äî —à–∞–≥ 3
@dp.message(Form.entering_start_date)
async def start_date_entered(message: types.Message, state: FSMContext):
    start_date = parse_date(message.text)
    if not start_date:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: –î–î.–ú–ú.–ì–ì–ì–ì")
        return

    await state.update_data(start_date=start_date.strftime("%Y-%m-%d"))
    await state.set_state(Form.entering_end_date)
    await message.answer("üìÖ –í–≤–µ–¥–∏ –¥–∞—Ç—É –æ–∫–æ–Ω—á–∞–Ω–∏—è (–≤ —Ñ–æ—Ä–º–∞—Ç–µ –î–î.–ú–ú.–ì–ì–ì–ì):")

# –í–≤–æ–¥ –¥–∞—Ç—ã –æ–∫–æ–Ω—á–∞–Ω–∏—è ‚Äî —à–∞–≥ 4
@dp.message(Form.entering_end_date)
async def end_date_entered(message: types.Message, state: FSMContext):
    end_date = parse_date(message.text)
    if not end_date:
        await message.answer("‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞: –î–î.–ú–ú.–ì–ì–ì–ì")
        return

    data = await state.get_data()
    start_date = datetime.strptime(data["start_date"], "%Y-%m-%d").date()

    if end_date < start_date:
        await message.answer("‚ùå –î–∞—Ç–∞ –æ–∫–æ–Ω—á–∞–Ω–∏—è –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å —Ä–∞–Ω—å—à–µ –¥–∞—Ç—ã –Ω–∞—á–∞–ª–∞. –í–≤–µ–¥–∏ –∑–∞–Ω–æ–≤–æ.")
        return

    user_id = str(message.from_user.id)
    db = load_data()
    record = {
        "status": data["chosen_status"],
        "start": data["start_date"],
        "end": end_date.strftime("%Y-%m-%d")
    }
    db[user_id]["statuses"].append(record)
    save_data(db)

    await state.clear()
    await message.answer(
        f"‚úÖ –°—Ç–∞—Ç—É—Å '{data['chosen_status']}' –¥–æ–±–∞–≤–ª–µ–Ω —Å {start_date.strftime('%d.%m.%Y')} –ø–æ {end_date.strftime('%d.%m.%Y')}",
        reply_markup=get_main_keyboard()
    )

# –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é
@dp.message(lambda msg: msg.text == "–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –Ω–µ–¥–µ–ª—é")
async def show_week_schedule(message: types.Message):
    report = generate_schedule_report(days=7)
    await message.answer(report)

# –ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –º–µ—Å—è—Ü
@dp.message(lambda msg: msg.text == "–ì—Ä–∞—Ñ–∏–∫ –Ω–∞ –º–µ—Å—è—Ü")
async def show_month_schedule(message: types.Message):
    report = generate_schedule_report(days=30)
    await message.answer(report)

# –û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç
@dp.message(lambda msg: msg.text == "–û—á–∏—Å—Ç–∏—Ç—å —á–∞—Ç")
async def clear_chat_handler(message: types.Message):
    await message.answer("üßπ –û—á–∏—â–∞—é –ø–æ—Å–ª–µ–¥–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    await clear_chat(message.chat.id, message.message_id, bot)
    await message.answer("‚úÖ –ß–∞—Ç –æ—á–∏—â–µ–Ω. –í—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ:", reply_markup=get_main_keyboard())

# –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
@dp.message()
async def unknown_message(message: types.Message):
    await message.answer("–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞. –ò—Å–ø–æ–ª—å–∑—É–π –∫–Ω–æ–ø–∫–∏ üëá", reply_markup=get_main_keyboard())

# –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    await dp.start_polling(bot)

if __name__ == "__main__":
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Ä—Ç 8080 ‚Äî —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –¥–ª—è Render
    port = int(os.environ.get("PORT", 8080))
    print(f"üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
